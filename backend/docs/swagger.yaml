basePath: /api
definitions:
  models.Book:
    properties:
      author:
        maxLength: 255
        type: string
      book_attrs:
        $ref: '#/definitions/models.BookAttrs'
      book_status:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      title:
        maxLength: 255
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    required:
    - author
    - book_attrs
    - book_status
    - title
    - user_id
    type: object
  models.BookAttrs:
    properties:
      description:
        type: string
      picture:
        type: string
      rating:
        maximum: 10
        minimum: 1
        type: integer
    type: object
  models.Cart:
    properties:
      cart_status:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      price:
        type: integer
      product_id:
        type: integer
      quantity:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    required:
    - product_id
    - quantity
    - user_id
    type: object
  models.Invoice:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      invoice_items:
        items:
          $ref: '#/definitions/models.InvoiceItem'
        type: array
      status:
        type: string
      total:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    required:
    - status
    - total
    - user_id
    type: object
  models.InvoiceItem:
    properties:
      created_at:
        type: string
      id:
        type: integer
      invoice_id:
        type: integer
      price:
        type: integer
      product:
        type: string
      product_id:
        type: integer
      quantity:
        type: integer
      updated_at:
        type: string
    required:
    - price
    - product
    - product_id
    - quantity
    type: object
  models.PayloadInvoice:
    properties:
      cart_id:
        type: integer
    type: object
  models.Product:
    properties:
      created_at:
        type: string
      id:
        type: integer
      price:
        type: integer
      product_attrs:
        $ref: '#/definitions/models.ProductAttrs'
      product_status:
        type: integer
      quantity:
        type: integer
      title:
        maxLength: 255
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    required:
    - price
    - product_attrs
    - product_status
    - quantity
    - title
    - user_id
    type: object
  models.ProductAttrs:
    properties:
      description:
        type: string
      picture:
        type: string
      rating:
        maximum: 10
        minimum: 1
        type: integer
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        maxLength: 255
        type: string
      id:
        type: integer
      password_hash:
        maxLength: 255
        type: string
      updated_at:
        type: string
      user_role:
        maxLength: 25
        type: string
      user_status:
        type: integer
    required:
    - email
    - password_hash
    - user_role
    - user_status
    type: object
info:
  contact:
    email: your@mail.com
    name: API Support
  description: This is an auto-generated API Docs.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: API
  version: "1.0"
paths:
  /v1/book:
    delete:
      consumes:
      - application/json
      description: Delete book by given ID.
      parameters:
      - description: Book ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: delete book by given ID
      tags:
      - Book
    post:
      consumes:
      - application/json
      description: Create a new book.
      parameters:
      - description: Title
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: Author
        in: body
        name: author
        required: true
        schema:
          type: string
      - description: User ID
        in: body
        name: user_id
        required: true
        schema:
          type: string
      - description: Book attributes
        in: body
        name: book_attrs
        required: true
        schema:
          $ref: '#/definitions/models.BookAttrs'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      security:
      - ApiKeyAuth: []
      summary: create a new book
      tags:
      - Book
    put:
      consumes:
      - application/json
      description: Update book.
      parameters:
      - description: Book ID
        in: body
        name: id
        required: true
        schema:
          type: string
      - description: Title
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: Author
        in: body
        name: author
        required: true
        schema:
          type: string
      - description: User ID
        in: body
        name: user_id
        required: true
        schema:
          type: string
      - description: Book status
        in: body
        name: book_status
        required: true
        schema:
          type: integer
      - description: Book attributes
        in: body
        name: book_attrs
        required: true
        schema:
          $ref: '#/definitions/models.BookAttrs'
      produces:
      - application/json
      responses:
        "202":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: update book
      tags:
      - Book
  /v1/book/{id}:
    get:
      consumes:
      - application/json
      description: Get book by given ID.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      summary: get book by given ID
      tags:
      - Book
  /v1/books:
    get:
      consumes:
      - application/json
      description: Get all exists books.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: get all exists books
      tags:
      - Books
  /v1/cart:
    delete:
      consumes:
      - application/json
      description: Delete cart by given ID.
      parameters:
      - description: cart ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: delete cart by given ID
      tags:
      - cart
    get:
      consumes:
      - application/json
      description: Get all exists cart.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Cart'
            type: array
      summary: get all exists cart
      tags:
      - cart
    post:
      consumes:
      - application/json
      description: Create a new cart.
      parameters:
      - description: Title
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: User ID
        in: body
        name: user_id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Cart'
      security:
      - ApiKeyAuth: []
      summary: create a new cart
      tags:
      - cart
    put:
      consumes:
      - application/json
      description: Update cart.
      parameters:
      - description: cart ID
        in: body
        name: id
        required: true
        schema:
          type: string
      - description: Title
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: User ID
        in: body
        name: user_id
        required: true
        schema:
          type: string
      - description: cart status
        in: body
        name: cart_status
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "202":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: update cart
      tags:
      - cart
  /v1/invoice:
    get:
      consumes:
      - application/json
      description: Get all exists invoice.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Invoice'
            type: array
      security:
      - ApiKeyAuth: []
      summary: get all exists invoice
      tags:
      - invoice
    post:
      consumes:
      - application/json
      description: Create a new invoice.
      parameters:
      - description: Cart IDs
        in: body
        name: cart_id
        required: true
        schema:
          $ref: '#/definitions/models.PayloadInvoice'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Invoice'
      security:
      - ApiKeyAuth: []
      summary: create a new invoice
      tags:
      - invoice
    put:
      consumes:
      - application/json
      description: Update invoice.
      parameters:
      - description: invoice ID
        in: body
        name: id
        required: true
        schema:
          type: string
      - description: Title
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: User ID
        in: body
        name: user_id
        required: true
        schema:
          type: string
      - description: invoice status
        in: body
        name: invoice_status
        required: true
        schema:
          type: integer
      - description: invoice items
        in: body
        name: invoice_attrs
        required: true
        schema:
          $ref: '#/definitions/models.InvoiceItem'
      produces:
      - application/json
      responses:
        "202":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: update invoice
      tags:
      - invoice
  /v1/invoice/{id}:
    get:
      consumes:
      - application/json
      description: Get invoice by given ID.
      parameters:
      - description: invoice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Invoice'
      security:
      - ApiKeyAuth: []
      summary: get invoice by given ID
      tags:
      - invoice
  /v1/product:
    delete:
      consumes:
      - application/json
      description: Delete product by given ID.
      parameters:
      - description: product ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: delete product by given ID
      tags:
      - product
    post:
      consumes:
      - application/json
      description: Create a new product.
      parameters:
      - description: Title
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: Price
        in: body
        name: price
        required: true
        schema:
          type: integer
      - description: Quantity
        in: body
        name: quantity
        required: true
        schema:
          type: integer
      - description: product attributes
        in: body
        name: product_attrs
        required: true
        schema:
          $ref: '#/definitions/models.ProductAttrs'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
      security:
      - ApiKeyAuth: []
      summary: create a new product
      tags:
      - product
    put:
      consumes:
      - application/json
      description: Update product.
      parameters:
      - description: Title
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: Price
        in: body
        name: price
        required: true
        schema:
          type: integer
      - description: Quantity
        in: body
        name: quantity
        required: true
        schema:
          type: integer
      - description: product status
        in: body
        name: product_status
        required: true
        schema:
          type: integer
      - description: product attributes
        in: body
        name: product_attrs
        required: true
        schema:
          $ref: '#/definitions/models.ProductAttrs'
      produces:
      - application/json
      responses:
        "202":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: update product
      tags:
      - product
  /v1/product/{id}:
    get:
      consumes:
      - application/json
      description: Get product by given ID.
      parameters:
      - description: product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
      summary: get product by given ID
      tags:
      - product
  /v1/products:
    get:
      consumes:
      - application/json
      description: Get all exists products.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      summary: get all exists products
      tags:
      - products
  /v1/token/renew:
    post:
      consumes:
      - application/json
      description: Renew access and refresh tokens.
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: renew access and refresh tokens
      tags:
      - Token
  /v1/user/sign/in:
    post:
      consumes:
      - application/json
      description: Auth user and return access and refresh token.
      parameters:
      - description: User Email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: User Password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: auth user and return access and refresh token
      tags:
      - User
  /v1/user/sign/out:
    post:
      consumes:
      - application/json
      description: De-authorize user and delete refresh token from Redis.
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: de-authorize user and delete refresh token from Redis
      tags:
      - User
  /v1/user/sign/up:
    post:
      consumes:
      - application/json
      description: Create a new user.
      parameters:
      - description: Email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Password
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: User role
        in: body
        name: user_role
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: create a new user
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
